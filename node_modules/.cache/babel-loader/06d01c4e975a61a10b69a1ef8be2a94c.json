{"ast":null,"code":"// packages\nimport { Dimensions, PixelRatio } from 'react-native'; // Retrieve initial screen's width\n\nlet screenWidth = Dimensions.get('window').width; // Retrieve initial screen's height\n\nlet screenHeight = Dimensions.get('window').height;\n/**\n * Converts provided width percentage to independent pixel (dp).\n * @param  {string} widthPercent The percentage of screen's width that UI element should cover\n *                               along with the percentage symbol (%).\n * @return {number}              The calculated dp depending on current device's screen width.\n */\n\nconst widthPercentageToDP = widthPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemWidth = typeof widthPercent === \"number\" ? widthPercent : parseFloat(widthPercent); // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\n/**\n * Converts provided height percentage to independent pixel (dp).\n * @param  {string} heightPercent The percentage of screen's height that UI element should cover\n *                                along with the percentage symbol (%).\n * @return {number}               The calculated dp depending on current device's screen height.\n */\n\n\nconst heightPercentageToDP = heightPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemHeight = typeof heightPercent === \"number\" ? heightPercent : parseFloat(heightPercent); // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\n/**\n * Event listener function that detects orientation change (every time it occurs) and triggers \n * screen rerendering. It does that, by changing the state of the screen where the function is\n * called. State changing occurs for a new state variable with the name 'orientation' that will\n * always hold the current value of the orientation after the 1st orientation change.\n * Invoke it inside the screen's constructor or in componentDidMount lifecycle method.\n * @param {object} that Screen's class component this variable. The function needs it to\n *                      invoke setState method and trigger screen rerender (this.setState()).\n */\n\n\nconst listenOrientationChange = that => {\n  Dimensions.addEventListener('change', newDimensions => {\n    // Retrieve and save new dimensions\n    screenWidth = newDimensions.window.width;\n    screenHeight = newDimensions.window.height; // Trigger screen's rerender with a state update of the orientation variable\n\n    that.setState({\n      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'\n    });\n  });\n};\n/**\n * Wrapper function that removes orientation change listener and should be invoked in\n * componentWillUnmount lifecycle method of every class component (UI screen) that\n * listenOrientationChange function has been invoked. This should be done in order to\n * avoid adding new listeners every time the same component is re-mounted.\n */\n\n\nconst removeOrientationListener = () => {\n  Dimensions.removeEventListener('change', () => {});\n};\n\nexport { widthPercentageToDP, heightPercentageToDP, listenOrientationChange, removeOrientationListener };","map":{"version":3,"sources":["C:/Users/pedro/node_modules/react-native-responsive-screen/index.js"],"names":["Dimensions","PixelRatio","screenWidth","get","width","screenHeight","height","widthPercentageToDP","widthPercent","elemWidth","parseFloat","roundToNearestPixel","heightPercentageToDP","heightPercent","elemHeight","listenOrientationChange","that","addEventListener","newDimensions","window","setState","orientation","removeOrientationListener","removeEventListener"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,cAAvC,C,CAEA;;AACA,IAAIC,WAAW,GAAGF,UAAU,CAACG,GAAX,CAAe,QAAf,EAAyBC,KAA3C,C,CAEA;;AACA,IAAIC,YAAY,GAAGL,UAAU,CAACG,GAAX,CAAe,QAAf,EAAyBG,MAA5C;AAEA;;;;;;;AAMA,MAAMC,mBAAmB,GAAGC,YAAY,IAAI;AAC1C;AACA,QAAMC,SAAS,GAAG,OAAOD,YAAP,KAAwB,QAAxB,GAAmCA,YAAnC,GAAkDE,UAAU,CAACF,YAAD,CAA9E,CAF0C,CAI1C;AACA;;AACA,SAAOP,UAAU,CAACU,mBAAX,CAA+BT,WAAW,GAAGO,SAAd,GAA0B,GAAzD,CAAP;AACD,CAPD;AASA;;;;;;;;AAMA,MAAMG,oBAAoB,GAAGC,aAAa,IAAI;AAC5C;AACA,QAAMC,UAAU,GAAG,OAAOD,aAAP,KAAyB,QAAzB,GAAoCA,aAApC,GAAoDH,UAAU,CAACG,aAAD,CAAjF,CAF4C,CAI5C;AACA;;AACA,SAAOZ,UAAU,CAACU,mBAAX,CAA+BN,YAAY,GAAGS,UAAf,GAA4B,GAA3D,CAAP;AACD,CAPD;AASA;;;;;;;;;;;AASA,MAAMC,uBAAuB,GAAGC,IAAI,IAAI;AACtChB,EAAAA,UAAU,CAACiB,gBAAX,CAA4B,QAA5B,EAAsCC,aAAa,IAAI;AACrD;AACAhB,IAAAA,WAAW,GAAGgB,aAAa,CAACC,MAAd,CAAqBf,KAAnC;AACAC,IAAAA,YAAY,GAAGa,aAAa,CAACC,MAAd,CAAqBb,MAApC,CAHqD,CAKrD;;AACAU,IAAAA,IAAI,CAACI,QAAL,CAAc;AACZC,MAAAA,WAAW,EAAEnB,WAAW,GAAGG,YAAd,GAA6B,UAA7B,GAA0C;AAD3C,KAAd;AAGD,GATD;AAUD,CAXD;AAaA;;;;;;;;AAMA,MAAMiB,yBAAyB,GAAG,MAAM;AACtCtB,EAAAA,UAAU,CAACuB,mBAAX,CAA+B,QAA/B,EAAyC,MAAM,CAAE,CAAjD;AACD,CAFD;;AAIA,SACEhB,mBADF,EAEEK,oBAFF,EAGEG,uBAHF,EAIEO,yBAJF","sourcesContent":["// packages\nimport { Dimensions, PixelRatio } from 'react-native';\n\n// Retrieve initial screen's width\nlet screenWidth = Dimensions.get('window').width;\n\n// Retrieve initial screen's height\nlet screenHeight = Dimensions.get('window').height;\n\n/**\n * Converts provided width percentage to independent pixel (dp).\n * @param  {string} widthPercent The percentage of screen's width that UI element should cover\n *                               along with the percentage symbol (%).\n * @return {number}              The calculated dp depending on current device's screen width.\n */\nconst widthPercentageToDP = widthPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemWidth = typeof widthPercent === \"number\" ? widthPercent : parseFloat(widthPercent);\n\n  // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\n\n/**\n * Converts provided height percentage to independent pixel (dp).\n * @param  {string} heightPercent The percentage of screen's height that UI element should cover\n *                                along with the percentage symbol (%).\n * @return {number}               The calculated dp depending on current device's screen height.\n */\nconst heightPercentageToDP = heightPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemHeight = typeof heightPercent === \"number\" ? heightPercent : parseFloat(heightPercent);\n\n  // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\n\n/**\n * Event listener function that detects orientation change (every time it occurs) and triggers \n * screen rerendering. It does that, by changing the state of the screen where the function is\n * called. State changing occurs for a new state variable with the name 'orientation' that will\n * always hold the current value of the orientation after the 1st orientation change.\n * Invoke it inside the screen's constructor or in componentDidMount lifecycle method.\n * @param {object} that Screen's class component this variable. The function needs it to\n *                      invoke setState method and trigger screen rerender (this.setState()).\n */\nconst listenOrientationChange = that => {\n  Dimensions.addEventListener('change', newDimensions => {\n    // Retrieve and save new dimensions\n    screenWidth = newDimensions.window.width;\n    screenHeight = newDimensions.window.height;\n\n    // Trigger screen's rerender with a state update of the orientation variable\n    that.setState({\n      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'\n    });\n  });\n};\n\n/**\n * Wrapper function that removes orientation change listener and should be invoked in\n * componentWillUnmount lifecycle method of every class component (UI screen) that\n * listenOrientationChange function has been invoked. This should be done in order to\n * avoid adding new listeners every time the same component is re-mounted.\n */\nconst removeOrientationListener = () => {\n  Dimensions.removeEventListener('change', () => {});\n};\n\nexport {\n  widthPercentageToDP,\n  heightPercentageToDP,\n  listenOrientationChange,\n  removeOrientationListener\n};\n"]},"metadata":{},"sourceType":"module"}